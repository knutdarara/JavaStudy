 큐 (queue) : 선입선출되는 First In First Out (FIFO)구조로 동작하는 자료구조  , 일반적으로, 큐는 선형 큐를 의미. 하지만 선형 큐는 단점이 있음.
	문제점을 극복하기 위해 환형 큐 , 링크드 큐 등이 고안됨. 

스택(stack) : 나중에 입력된 자료가 먼저 출력되는 자료 구조 

운영체제에서 스택은 프린터 작업 처리, 프로세스 관리 등 데이터나 요청이 입력된 순서대로 작업을 처리해야하는 상황에 주로 이용된다. ??
스택이 아니라 큐가 그런거아님?

1.선형 큐(Linear Queue) : 큐의 가장 단순한 형태.  가장 앞:front 가장 뒤: rear 
	rear가 가리키는 현재 위치에 자료가 추가되고 rear이 1만큼 증가 . 
	front가 가리키는 위치에서 자료를 꺼내고 front를 1만큼 증가 시킴
	문제점 : front가 증가하여 큐의 일정공간을 이용할 수 없게 된다.

이러한 문제점을 해결하기위해 큐에 저장된 모든 데이터를 큐의 앞쪾으로 옮기는 shifting 연산이 필요.

2. 환형 큐 ( circular Queue ) : 선형 큐에서 저장공간이 감소하는 문제점을 극복하기 위해 고안. 
	선형 큐에서의 shift방식은 큐의 크기가 커질수록 비효율적임. >> 원형으로 큐를 구성 
	큐의 처음과 끝이 연결된 것처럼 동작. 
	환형 큐의 pop, push 연산은 주로 모듈로(modulo, %)연산을 이용하여 구현
	
큐 기본함수 

pop push란 ?
push(element) : 큐에 원소를 추가 (뒤에)
pop() : 큐에 있는 원소를 삭제(앞에)

front(): 큐 제일 앞에 있는 원소를 반환
back(): 큐 제일 뒤에 있는 원소를 반환

empty(): 큐가 비어있으면 true 아니면 false를 반환
size(): 큐 사이즈를 반환

top() — 스택의 맨 위에 있는 데이터 값(가장 최신에 업데이트 한 값)을 반환한다.

isempty() — 스택에 원소가 없으면 true, 있으면 false;
isfull() — 스택에 원소가 없으면 false, 있느면 true;

-----------------------------------------------------------------------------------------------------------------------------------------
스택 stack : top이라 부르는 한쪽 끝에서만 자료를 추가하거나 꺼낼 수 있는 자료구조. 
	 Last In First Out (LIFO)의 구조로 동작
	가장 최근에 추가된 자료부터 읽는다. 
	함수 호출이나 재귀적 실행을 스택이라는 자료구조를 통해 간단히 구현가능 
	ex) 시스템 스택 
스택에 자료를 추가하는 연산 push
자료를 꺼내는 연산 pop
스택 기본 함수 
top() — 스택의 맨 위에 있는 데이터 값(가장 최신에 업데이트 한 값)을 반환한다.
pop() — 데이터를 스택에서 빼내는 것
push() — 데이터를 스택에 쌓는 것
isempty() — 스택에 원소가 없으면 true, 있으면 false;
isfull() — 스택에 원소가 없으면 false, 있느면 true;

