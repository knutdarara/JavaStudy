알고리즘 : 어떤 목적을 달성하거나 결과물을 만들어 내기 위해 거쳐야하는 일련의 과정들을 의미




Time Complexity (시간 복잡도 ) : 
알고리즘을 구성하는 명령어들이 몇 번이나 실행이 되는지를 센 결과에 각 명령어의 실행시간을 곱한 합계를 의미한다.

명령어의 실행시간은 특정 하드웨어 혹은 프로그래밍 언어에 따라서 그 값이 달라질 수 있기 때문에
>>> 고리즘의 일반적인 시간 복잡도는 명령어의 실제 실행시간을 제외한 명령어의 실행 횟수만을 고려하게 된다

Big-O 표기법 : 시간 복잡도를 표기하는 방법중 하나. 실행 시간 n을 O(n)으로 표기    >> 알고리즘의 효율성을 표기해주는 표기법
	차수가 가장 높은 최고차항만 두고 나머지는 버린다. 값이 클수록 비효율적임.


O(1)		상수 	constant time		입력 데이터양과 상관없이 일정한 실행시간, 알고리즘이 문제를 해결하는데 한단계만 거침.
		입력 데이터의 크기와 상관없이 언제나 일정한 시간이 걸리는 알고리즘을 말한다.

O(log n) 		로그시간	log time			데이터양이 많아져도, 시간이 조금씩 늘어남
						시간에 비례하여, 탐색 가능한 데이터양이 2의 n승
						문제를 해결하는데 필요한 단계들이 연산마다 특정 요인에 의해 줄어듬
						주로 커다란 문제를 일정한 크기를 갖는 작은 문제로 쪼갤때 나타나는 유형

O(n)		선형시간	linear time		데이터양에 따라 시간이 정비례 , 
		입력 데이터의 크기에 비례해서 처리시간에 걸리는 알고리즘을 표현할 때 사용
		
O(n log n) 	로그선형시간 log linear time	
	
O(n^2)		2차원 시간 quadratic time		데이터양에 따라 걸리는 시간은 제곱에 비례한다. (효율이 좋지 않아 사용 X)
						이중 Loop내에서 입력 자료를 처리 하는 경우에 사용. N값이 큰 값이 되면 실행 시간은 감당하지 못할 정도로 커짐
						문제를 해결하기 위한 단계의 수는 입력값 n의 제곱
						
O(n^3)		3차원 시간(입방면) cubic time
	
O(2^n)		지수 시간 exponential time	

왜 시간 복잡도를 사용하는가? 수행시간을 통해서 시간복잡도를 구하고 효율적인 알고리즘인지 분석하기 위해서 사용.	