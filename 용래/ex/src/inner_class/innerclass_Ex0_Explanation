먼저
첫번째, 내부클래스는 다중상속의 문제점을 해결하기 위한 방법 중 하나이다.(예시 - 다이아몬드 문제를 Ex2에서 다룰예정))
      - 다이아몬드 문제 설명(Person, mother, father, son 이라는 4개의 클래스가 있다고 가정하고 Person("사람")클래스를 mother와 father가
        상속받으면서 "사람"이라는 메소드를 가지게 되었다고 치면 son은 mother와 father 둘 다 가지고있는 "사람"이라는 메소드를 누구에게서 상속
        을 받을건지가 문제가 되는 상황을 다이아몬드 문제라고 함

두번째, 인터페이스는 다중상속이 가능하다 이유는 인터페이스의 메소드는 추상 메소드이기 때문에 같은 메소드명이 존재해도 인터페이스를 상속받은
       클래스에서 원하는 메소드를 구현하므로 충돌이 발생하지 않는다(인터페이스는 선언해놓고 구현을 안하기 때문에 사용자가 원하는 메소드를
       재정의 해서 사용하기 때문)->Ex2_2에서 다룰예정

세번째, 내부클래스로 다중상속을 해결한 예제를 따라해보자


Ex1는 내부클래스의 사용 방법에 대해서 작성한 예제이다.
Ex1에서는
내부클래스를 사용하기 전에는 어떻게 작성했었고 내부클래스를 사용하게 되면서 접근 방법과 객체 생성 방식이 어떻게 바뀌는지 보자